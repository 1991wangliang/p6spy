/*
 * #%L
 * P6Spy
 * %%
 * Copyright (C) 2002 - 2016 P6Spy
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package com.p6spy.engine.wrapper;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

import com.p6spy.engine.common.ResultSetInformation;
import com.p6spy.engine.common.StatementInformation;
import com.p6spy.engine.event.JdbcEventListener;
import com.p6spy.engine.proxy.P6Proxy;

/**
 * Provides a convenient implementation of the Statement interface
 * that can be subclassed by developers wishing to adapt implementation.
 * <p>
 * This class implements the Wrapper or Decorator pattern. Methods default
 * to calling through to the wrapped request object.
 *
 * @see Statement
 */
public class StatementWrapper implements Statement, P6Proxy {

  private final Statement delegate;
  protected final JdbcEventListener eventListener;
  private final StatementInformation statementInformation;

  public StatementWrapper(Statement delegate, StatementInformation statementInformation, JdbcEventListener eventListener) {
    this.delegate = delegate;
    this.eventListener = eventListener;
    this.statementInformation = statementInformation;
  }

  @Override
  public ResultSet getResultSet() throws SQLException {
    long start = System.nanoTime();
    try {
      return new ResultSetWrapper(delegate.getResultSet(), new ResultSetInformation(statementInformation), eventListener);
    } finally {
      eventListener.onGetResultSet(statementInformation, System.nanoTime() - start);
    }
  }

  @Override
  public ResultSet executeQuery(String sql) throws SQLException {
    statementInformation.setStatementQuery(sql);
    long start = System.nanoTime();
    try {
      return new ResultSetWrapper(delegate.executeQuery(sql), new ResultSetInformation(statementInformation), eventListener);
    } finally {
      eventListener.onExecuteQuery(statementInformation, System.nanoTime() - start, sql);
    }
  }

  @Override
  public int[] executeBatch() throws SQLException {
    long start = System.nanoTime();
    try {
      return delegate.executeBatch();
    } finally {
      eventListener.onExecuteBatch(statementInformation, System.nanoTime() - start);
    }
  }

  @Override
  public boolean execute(String sql) throws SQLException {
    long start = System.nanoTime();
    try {
      return delegate.execute(sql);
    } finally {
      eventListener.onExecute(statementInformation, System.nanoTime() - start, sql);
    }
  }

  @Override
  public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
    long start = System.nanoTime();
    try {
      return delegate.execute(sql, autoGeneratedKeys);
    } finally {
      eventListener.onExecute(statementInformation, System.nanoTime() - start, sql);
    }
  }

  @Override
  public boolean execute(String sql, int[] columnIndexes) throws SQLException {
    long start = System.nanoTime();
    try {
      return delegate.execute(sql, columnIndexes);
    } finally {
      eventListener.onExecute(statementInformation, System.nanoTime() - start, sql);
    }
  }

  @Override
  public boolean execute(String sql, String[] columnNames) throws SQLException {
    long start = System.nanoTime();
    try {
      return delegate.execute(sql, columnNames);
    } finally {
      eventListener.onExecute(statementInformation, System.nanoTime() - start, sql);
    }
  }

  @Override
  public int executeUpdate(String sql) throws SQLException {
    long start = System.nanoTime();
    try {
      return delegate.executeUpdate(sql);
    } finally {
      eventListener.onExecuteUpdate(statementInformation, System.nanoTime() - start, sql);
    }
  }

  @Override
  public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
    long start = System.nanoTime();
    try {
      return delegate.executeUpdate(sql, autoGeneratedKeys);
    } finally {
      eventListener.onExecuteUpdate(statementInformation, System.nanoTime() - start, sql);
    }
  }

  @Override
  public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
    long start = System.nanoTime();
    try {
      return delegate.executeUpdate(sql, columnIndexes);
    } finally {
      eventListener.onExecuteUpdate(statementInformation, System.nanoTime() - start, sql);
    }
  }

  @Override
  public int executeUpdate(String sql, String[] columnNames) throws SQLException {
    long start = System.nanoTime();
    try {
      return delegate.executeUpdate(sql, columnNames);
    } finally {
      eventListener.onExecuteUpdate(statementInformation, System.nanoTime() - start, sql);
    }
  }

  @Override
  public void addBatch(String sql) throws SQLException {
    try {
      delegate.addBatch(sql);
    } finally {
      eventListener.onAddBatch(statementInformation, sql);
    }
  }

  @Override
  public void close() throws SQLException {
    delegate.close();
  }

  @Override
  public int getMaxFieldSize() throws SQLException {
    return delegate.getMaxFieldSize();
  }

  @Override
  public void setMaxFieldSize(int max) throws SQLException {
    delegate.setMaxFieldSize(max);
  }

  @Override
  public int getMaxRows() throws SQLException {
    return delegate.getMaxRows();
  }

  @Override
  public void setMaxRows(int max) throws SQLException {
    delegate.setMaxRows(max);
  }

  @Override
  public void setEscapeProcessing(boolean enable) throws SQLException {
    delegate.setEscapeProcessing(enable);
  }

  @Override
  public int getQueryTimeout() throws SQLException {
    return delegate.getQueryTimeout();
  }

  @Override
  public void setQueryTimeout(int seconds) throws SQLException {
    delegate.setQueryTimeout(seconds);
  }

  @Override
  public void cancel() throws SQLException {
    delegate.cancel();
  }

  @Override
  public SQLWarning getWarnings() throws SQLException {
    return delegate.getWarnings();
  }

  @Override
  public void clearWarnings() throws SQLException {
    delegate.clearWarnings();
  }

  @Override
  public void setCursorName(String name) throws SQLException {
    delegate.setCursorName(name);
  }

  @Override
  public int getUpdateCount() throws SQLException {
    return delegate.getUpdateCount();
  }

  @Override
  public boolean getMoreResults() throws SQLException {
    return delegate.getMoreResults();
  }

  @Override
  public void setFetchDirection(int direction) throws SQLException {
    delegate.setFetchDirection(direction);
  }

  @Override
  public int getFetchDirection() throws SQLException {
    return delegate.getFetchDirection();
  }

  @Override
  public void setFetchSize(int rows) throws SQLException {
    delegate.setFetchSize(rows);
  }

  @Override
  public int getFetchSize() throws SQLException {
    return delegate.getFetchSize();
  }

  @Override
  public int getResultSetConcurrency() throws SQLException {
    return delegate.getResultSetConcurrency();
  }

  @Override
  public int getResultSetType() throws SQLException {
    return delegate.getResultSetType();
  }

  @Override
  public void clearBatch() throws SQLException {
    delegate.clearBatch();
  }

  @Override
  public Connection getConnection() throws SQLException {
    return delegate.getConnection();
  }

  @Override
  public boolean getMoreResults(int current) throws SQLException {
    return delegate.getMoreResults(current);
  }

  @Override
  public ResultSet getGeneratedKeys() throws SQLException {
    return delegate.getGeneratedKeys();
  }

  @Override
  public int getResultSetHoldability() throws SQLException {
    return delegate.getResultSetHoldability();
  }

  @Override
  public boolean isClosed() throws SQLException {
    return delegate.isClosed();
  }

  @Override
  public void setPoolable(boolean poolable) throws SQLException {
    delegate.setPoolable(poolable);
  }

  @Override
  public boolean isPoolable() throws SQLException {
    return delegate.isPoolable();
  }

  @Override
  public <T> T unwrap(Class<T> iface) throws SQLException {
    return delegate.unwrap(iface);
  }

  @Override
  public boolean isWrapperFor(Class<?> iface) throws SQLException {
    return delegate.isWrapperFor(iface);
  }

  @Override
  public void closeOnCompletion() throws SQLException {
    delegate.closeOnCompletion();
  }

  @Override
  public boolean isCloseOnCompletion() throws SQLException {
    return delegate.isCloseOnCompletion();
  }

  @Override
  public Object unwrapP6SpyProxy() {
    return delegate;
  }
}
